; Script generated by the Mep Installer Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING MEP INSTALLER PROJECT FILES!

#define VersaoPrograma '4.1.0'

[Setup]
AppId={{CB978276-F8D2-4CC5-A48F-630BCC75A312}
AppName=ETE XE
AppVersion=ETE
AppPublisher=Criar Sistemas Inteligentes Ltda.
DefaultDirName={pf}\Criar\ETE XE
DisableDirPage=false
DefaultGroupName=Criar\ETE XE
DisableProgramGroupPage=true
OutputBaseFilename=ete-xe-setup-{#VersaoPrograma}
Compression=lzma
SolidCompression=true
AppCopyright=®2021 Criar Sistemas Inteligentes
ShowLanguageDialog=no
SetupIconFile=C:\Repositorio\Fontes\ETE\Trunk\Instalação\imagens\General Box.ico
WizardImageFile=C:\Repositorio\Fontes\ETE\Trunk\Instalação\imagens\LateralNova.bmp
WizardSmallImageFile=C:\Repositorio\Fontes\ETE\Trunk\Instalação\imagens\Topo2.bmp
VersionInfoVersion={#VersaoPrograma}
VersionInfoCompany=Criar Sistemas Inteligentes Ltda.
TimeStampsInUTC=false
AlwaysShowDirOnReadyPage=true
AlwaysShowGroupOnReadyPage=true
WizardImageStretch=false
PrivilegesRequired=none
AlwaysShowComponentsList=true
ShowComponentSizes=false
FlatComponentsList=false
AllowRootDirectory=true
AppendDefaultDirName=false
UserInfoPage=false
AppVerName=ETE

InternalCompressLevel=ultra
UsePreviousAppDir=false
OutputDir=C:\Publicar\Assinar Instalador
UsePreviousGroup=false
DirExistsWarning=no
MinVersion=0,6.0.6000
AppPublisherURL=www.grupocriar.com.br

[Dirs]
Name: "{pf}\Criar"; Permissions: everyone-modify
;Name: "{pf}\Criar\ETE"; Permissions: everyone-modify
Name: "{pf}\Criar\ETE XE"; Permissions: everyone-modify
Name: "{commonappdata}\Criar"; Permissions: everyone-modify
;Name: "{commonappdata}\Criar\ETE"; Permissions: everyone-modify
;Name: "{commonappdata}\Criar\ETE\enviar"; Permissions: everyone-modify
Name: "{commonappdata}\Criar\ETE XE"; Permissions: everyone-modify

[Languages]
Name: brazilianportuguese; MessagesFile: compiler:Languages\BrazilianPortuguese.isl

[Tasks]
Name: desktopicon; Description: {cm:CreateDesktopIcon}; GroupDescription: {cm:AdditionalIcons}

[Files]
Source: "arquivos\ETE_XE.exe"; DestDir: "{app}"; Flags: ignoreversion
Source: "arquivos\changelog"; DestDir: "{app}"; Flags: ignoreversion
Source: "arquivos\Peletronica.ico"; DestDir: "{app}"; Flags: ignoreversion
Source: "exe\crc-setup.exe"; DestDir: "{tmp}"; Flags: ignoreversion; Permissions: everyone-modify users-modify powerusers-modify admins-modify system-modify authusers-modify
Source: "exe\msxml.msi"; DestDir: "{tmp}"; Flags: ignoreversion
Source: "exe\ffmpeg.exe"; DestDir: "{app}"; Flags: ignoreversion
Source: "exe\biometrika_sharp-setup.exe"; DestDir: "{tmp}"; Flags: ignoreversion
Source: "exe\eStatusDVRSharp.exe"; DestDir: "{app}"; Flags: ignoreversion
Source: "dll\dhnetsdk.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "dll\NetSDKCS.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "dll\PlaySDKCS.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "dll\VDCSDKCS.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: dll\Outras BA\FTRAPI.dll; DestDir: {%USERPROFILE}\biometrika\drivers; Check: DLLVerifyBA
Source: dll\Outras BA\ftrJSDK.dll; DestDir: {%USERPROFILE}\biometrika\drivers; Check: DLLVerifyBA
Source: dll\Outras BA\ftrScanAPI_64.dll; DestDir: {%USERPROFILE}\biometrika\drivers; DestName: ftrScanAPI.dll; Check: IsJavaX64
Source: dll\Outras BA\ftrScanAPI_64.lib; DestDir: {%USERPROFILE}\biometrika\drivers; DestName: ftrScanAPI.lib; Check: IsJavaX64
Source: dll\Outras BA\ftrScanAPI.dll; DestDir: {%USERPROFILE}\biometrika\drivers; Check: IsJavaX86
Source: dll\Outras BA\ftrScanAPI.lib; DestDir: {%USERPROFILE}\biometrika\drivers; Check: IsJavaX86
Source: dll\Outras SP\otdpfpjni.dll; DestDir: {sys}; Flags: onlyifdoesntexist; Check: DLLVerifySP
Source: dll\Outras SP\otfxjni.dll; DestDir: {sys}; Flags: onlyifdoesntexist; Check: DLLVerifySP
Source: dll\Outras SP\otmcjni.dll; DestDir: {sys}; Flags: onlyifdoesntexist; Check: DLLVerifySP
Source: arquivos\captura_foto.swf; DestDir: {commonappdata}\Criar\e-Prova XE; Flags: ignoreversion
Source: arquivos\captura_foto.swf; DestDir: "{app}"; Flags: ignoreversion

[Icons]
Name: {group}\ETE XE; Filename: {app}\ETE_XE.exe; WorkingDir: {app}; IconIndex: 0; Check: DLLVerifySP
Name: {commondesktop}\ETE XE; Filename: {app}\ETE_XE.exe; WorkingDir: {app}; Tasks: desktopicon; IconIndex: 0; Check: DLLVerifySP
Name: {group}\{cm:UninstallProgram,ETE-XE}; Filename: {uninstallexe}; Check: DLLVerifySP

[INI]
;Filename: {commonappdata}\Criar\parametros.cfg; Section: {code:GetUser|Secao}; Key: Versao; String: {#VersaoPrograma}; Flags: uninsdeleteentry uninsdeletesectionifempty
;Filename: {pf}\Criar\parametros.cfg; Section: {code:GetUser|Secao}; Key: Versao; String: {#VersaoPrograma}; Flags: uninsdeleteentry uninsdeletesectionifempty

[Run]
Filename: "{tmp}\msxml.msi"; Parameters: "/qn"; WorkingDir: "{tmp}"; Flags: waituntilidle shellexec; StatusMsg: "Instalando o MSXML. Por favor aguarde..."
Filename: "{tmp}\biometrika_sharp-setup.exe"; Parameters: "/VERYSILENT /SUPPRESSMSGBOXES"; WorkingDir: "{tmp}"; StatusMsg: "Instalando o Biometrika sharp. Por favor aguarde..."
Filename: "{tmp}\crc-setup.exe"; Parameters: "/VERYSILENT /SUPPRESSMSGBOXES"; WorkingDir: "{tmp}"; StatusMsg: "Instalando a Central de Relacionamento CRIAR. Por favor aguarde..."
Filename: "{pf}\criar\crc-xe\crcxe.exe"; Flags: shellexec nowait; Check: not CRCVerifyInstall

[Registry]
Root: HKLM; Subkey: Software\Criar\ETE; ValueType: string; ValueName: Versao; ValueData: {#VersaoPrograma}; Flags: uninsdeletekey
Root: HKLM; Subkey: Software\Criar\ETE; ValueType: string; ValueName: Versao; ValueData: {#VersaoPrograma}; Flags: uninsdeletekey; Check: DLLVerifySP
Root: HKLM; Subkey: SOFTWARE\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\Layers; ValueType: String; ValueName: {app}\eProva.exe; ValueData: RUNASADMIN; Flags: uninsdeletekeyifempty uninsdeletevalue; MinVersion: 0,6.1

;[InstallDelete]
;Type: files; Name: {group}\Iniciar ETE XE.lnk
;Type: files; Name: {commondesktop}\Iniciar ETEXE.lnk
;Type: files; Name: {commondesktop}\ETE XE-BA - Atalho.lnk

[Messages]
WelcomeLabel1=Bem-vindo ao Assistente de Instalação do [name]
FinishedHeadingLabel=Finalizando o Assistente de Instalação do [name]
WizardSelectDir=Selecione o Estado desejado.
SelectDirDesc=Onde o [name] será utilizado?
SelectDirLabel3=O Programa de Instalação irá instalar o [name] para o seguinte estado.
SelectDirBrowseLabel=Para continuar, escolha o estado desejado na lista abaixo e clique em Avançar.
DiskSpaceMBLabel=

[Code]
var
   ComboEstados: TComboBox;
   ArquivoSecao, SecaoEstado: string;
   CheckBoxCrc, CheckBoxSup: TNewCheckBox;
   StatusCrc, StatusSup, StatusDes: Boolean;

   JavaFound, Java32Found, Java64Found: Boolean;
   Java32Home, Java32JvmDll, Java32Version: String;
   Java64Home, Java64JvmDll, Java64Version: String;
   JavaHome, JavaJvmDll, JavaVersion: String;
   JavaMajorVersion, JavaMinorVersion: Integer;

Function CodigoSistema(uf: string): string;
var
   Codigo: string;
begin
     Codigo := '';

     //if uf = 'AL' then Codigo := '806076';
     //if uf = 'BA' then Codigo := '532997';
     //if uf = 'MG' then Codigo := '872461';
     //if uf = 'SE' then Codigo := '726851';
     if uf = 'SP' then Codigo := '529756';

     Result := Codigo;
end;

procedure ComboEstadosOnClick(Sender: TObject);
begin

     //if ComboEstados.ItemIndex = 1 then
     //   SecaoEstado := CodigoSistema('AL');

     //if ComboEstados.ItemIndex = 2 then
     //   SecaoEstado := CodigoSistema('BA');

     //if ComboEstados.ItemIndex = 3 then
     //   SecaoEstado := CodigoSistema('MG');

     //if ComboEstados.ItemIndex = 4 then
     //   SecaoEstado := CodigoSistema('SE');

     if ComboEstados.ItemIndex = 1 then
        SecaoEstado := CodigoSistema('SP');

end;

procedure CheckBoxOnClick(Sender: TObject);
begin
     StatusCrc := CheckBoxCrc.Checked;
     StatusSup := CheckBoxSup.Checked;
end;

procedure CreateTheWizardPages;
var
   Page: TWizardPage;
   Linha: TLabel;
begin
     Page := CreateCustomPage(wpWelcome, 'Componentes a serem instalados.', 'Escolha quais componentes devem ser instalados juntamente com o ETE.');

     Linha         := TLabel.Create(Page);
     Linha.Top     := ScaleY(8)+ScaleX(-8);
     Linha.Width   := Page.SurfaceWidth;
     Linha.Height  := ScaleY(17);
     Linha.Caption := 'Marque os componentes que devem ser instalados.';
     Linha.Parent  := Page.Surface;

     CheckBoxCrc         := TNewCheckBox.Create(Page);
     CheckBoxCrc.Top     := ScaleY(8)+ScaleX(30);
     CheckBoxCrc.Width   := Page.SurfaceWidth;
     CheckBoxCrc.Height  := ScaleY(17);
     CheckBoxCrc.Caption := 'Central de Relacionamento';
     CheckBoxCrc.Checked := True;
     CheckBoxCrc.OnClick := @CheckBoxOnClick;
     CheckBoxCrc.Parent  := Page.Surface;
     CheckBoxCrc.Enabled := False;
end;

procedure CreateTheWizardEstados();
var
   a_strTextfile : TArrayOfString;
begin
     ArquivoSecao := ExpandConstant('{commonappdata}')+'\Criar\ETE\eProva.uf';

     // Cria e configura o ComboBoz
     ComboEstados        := TComboBox.Create(WizardForm.SelectDirPage);
     ComboEstados.Parent := WizardForm.DirEdit.Parent;
     ComboEstados.Left   := WizardForm.DirEdit.Left;
     ComboEstados.Top    := WizardForm.DirEdit.Top + WizardForm.DirEdit.Height * 1;
     ComboEstados.Width  := WizardForm.DirEdit.Width;
     ComboEstados.Style  := csDropDownList;

     // Esconde os componentes que não serão utilizados
     WizardForm.DirBrowseButton.Visible := false;
     WizardForm.DirEdit.Visible := false;

     // Carrega os estados no ComboBox
     ComboEstados.Items.Add('Escolha o estado');
//     ComboEstados.Items.Add('ALAGOAS');
//     ComboEstados.Items.Add('BAHIA');
//     ComboEstados.Items.Add('MINAS GERAIS');
//     ComboEstados.Items.Add('SERGIPE');
     ComboEstados.Items.Add('SÃO PAULO');

     // Configurar um estado padrão
     // ComboEstados.ItemIndex := 0;

     // Para São Paulo
     ComboEstados.ItemIndex := 1;
     SecaoEstado := CodigoSistema('SP');

     // Configura o evento onClick do ComboBox
     ComboEstados.OnClick := @ComboEstadosOnClick ;

     if FileExists(ArquivoSecao) then
     begin
          LoadStringsFromFile(ArquivoSecao, a_strTextfile);

		  SecaoEstado := a_strTextfile[0];

          //if SecaoEstado = CodigoSistema('AL') then
          //   ComboEstados.itemIndex := 1;

          //if SecaoEstado = CodigoSistema('BA') then
          //   ComboEstados.itemIndex := 2;

          //if SecaoEstado = CodigoSistema('MG') then
          //   ComboEstados.itemIndex := 3;

          //if SecaoEstado = CodigoSistema('SE') then
          //   ComboEstados.itemIndex := 4;

          if SecaoEstado = CodigoSistema('SP') then
             ComboEstados.itemIndex := 1;

     end;
end;

function UnInstallOldVersion(): Integer;
var
   sUnInstallString: String;
   iResultCode: Integer;
begin
     Result := 0;

     if SecaoEstado = CodigoSistema('MG') then
     begin
          sUnInstallString := ExpandConstant('{pf}')+'\Criar\e-Prova-MG\unins000.exe';
          sUnInstallString := RemoveQuotes(sUnInstallString);
          Exec(sUnInstallString, '/SILENT /NORESTART /SUPPRESSMSGBOXES','', SW_HIDE, ewWaitUntilTerminated, iResultCode);

          sUnInstallString := ExpandConstant('{pf}')+'\Criar\Monitoramento-MG\unins000.exe';
          sUnInstallString := RemoveQuotes(sUnInstallString);
          Exec(sUnInstallString, '/SILENT /NORESTART /SUPPRESSMSGBOXES','', SW_HIDE, ewWaitUntilTerminated, iResultCode);
     end;

     if SecaoEstado = CodigoSistema('SP') then
     begin
          sUnInstallString := ExpandConstant('{pf}')+'\Criar\Suporte\unins000.exe';
          sUnInstallString := RemoveQuotes(sUnInstallString);
          Exec(sUnInstallString, '/SILENT /NORESTART /SUPPRESSMSGBOXES','', SW_HIDE, ewWaitUntilTerminated, iResultCode);
     end;

end;

function IsJavaX64: Boolean;
begin
     Result := Java64Found; //and Is64BitInstallMode and (ProcessorArchitecture = pax64);
end;

function IsJavaX86: Boolean;
begin
     Result := not IsJavaX64;
end;

function GetJavaHome(Default: String): String;
begin
     Result:= JavaHome;
end;

procedure InitializeJava();
var
   JreKey: String;
   JreVersionKey: String;
   MajorVersion: String;
   MinorVersion: String;
   Success : Boolean;
begin
     JavaFound := False;
     Java32Found := False;
     Java64Found := False;
     JreKey := 'SOFTWARE\JavaSoft\Java Runtime Environment';
     Success := RegQueryStringValue(HKLM32, JreKey, 'CurrentVersion', Java32Version);

     if Success then
     begin
          if not RegQueryStringValue(HKLM32, JreKey, 'CurrentVersion', Java32Version) then
               Exit;

          JreVersionKey := JreKey + '\' + Java32Version;
          if not RegQueryStringValue(HKLM32, JreVersionKey, 'JavaHome', Java32Home) then
             Exit;
          if not RegQueryStringValue(HKLM32, JreVersionKey, 'RuntimeLib', Java32JvmDll) then
             Exit;
          Java32Found := True;
     end;

     // See if we can find 64 bit Java.
     try
        Success := RegQueryStringValue(HKLM64, JreKey, 'CurrentVersion', Java64Version);
        if Success then
        begin
             // MsgBox('Found 64 bit Java Version: ' + Java64Version, mbInformation, MB_OK)
             if not RegQueryStringValue(HKLM64, JreKey, 'CurrentVersion', Java64Version) then
                Exit;

             JreVersionKey := JreKey + '\' + Java64Version;
             if not RegQueryStringValue(HKLM64, JreVersionKey, 'JavaHome', Java64Home) then
                Exit;
             if not RegQueryStringValue(HKLM64, JreVersionKey, 'RuntimeLib', Java64JvmDll) then
                Exit;

             Java64Found := True;
        end;
        //else
        //begin
           //MsgBox('64 bit Java Not Found ', mbInformation, MB_OK);
        //end
     except
     end;

     // Figure out if we're running 64 bit mode and 64 bit Java has been found. Use it
     // if we can, otherwise, use the 32 bit version.
     if IsJavaX64 then
     begin
          // JavaVersion is of the format "major.minor"
          MajorVersion  := Copy(Java64Version, 1, 1);
          MinorVersion  := Copy(Java64Version, 3, 1);
          JavaVersion   := Java64Version;
          JavaHome      := Java64Home;
          JavaJvmDll    := Java64JvmDll;
     end
     else
          if Java32Found then
          begin
               // JavaVersion is of the format "major.minor"
               MajorVersion  := Copy(Java32Version, 1, 1);
               MinorVersion  := Copy(Java32Version, 3, 1);
               JavaVersion   := Java32Version;
               JavaHome      := Java32Home;
               JavaJvmDll    := Java32JvmDll;
          end
     else
          Exit;

     JavaFound := true;
     JavaMajorVersion := StrToInt(MajorVersion);
     JavaMinorVersion := StrToInt(MinorVersion);
end;

procedure InitializeWizard();
begin
     InitializeJava;
     CreateTheWizardEstados;
     CreateTheWizardPages;
     StatusCrc := True;
     StatusSup := True;
     StatusDes := True;
end;

function GetUser(Param: String): String;
var
   Retorno: string;
begin
     Retorno := '';

     if SecaoEstado = CodigoSistema('AL') then
        Retorno := 'e-Prova-AL';

     if SecaoEstado = CodigoSistema('BA') then
        Retorno := 'e-Prova-BA';

     if SecaoEstado = CodigoSistema('MG') then
        Retorno := 'e-Prova-MG';

     if SecaoEstado = CodigoSistema('SE') then
        Retorno := 'e-Prova-SE';

     if SecaoEstado = CodigoSistema('SP') then
        Retorno := 'ETE-SP';

     Result := Retorno;
end;

function NextButtonClick(CurPageID: Integer): Boolean;
begin
     Result := True;

     if CurPageID = wpSelectDir then
     begin
          if ComboEstados.ItemIndex <= 0 then
          begin
               MsgBox('Por favor, escolha o estado desejado para continuar.', mbInformation, MB_OK);
               Result := False;
          end;
     end;
end;

procedure CurStepChanged(CurStep: TSetupStep);
begin
     if CurStep = ssPostInstall then
     begin
          SaveStringToFile(ArquivoSecao, SecaoEstado, False);
     end;

     if CurStep = ssInstall then
     begin
          UnInstallOldVersion();
     end;
end;

Function CRCVerifyInstall: Boolean;
var
   Versao: string;
begin
     Result := False;

     if StatusCrc then
     begin
          Result := not FileExists(ExpandConstant('{pf}\criar\crc-xe\crcctrlxe.exe'));
     end;
end;

Function DLLVerifyAL: Boolean;
begin
     Result := (SecaoEstado=CodigoSistema('AL'));
end;

Function DLLVerifyBA: Boolean;
begin
     Result := (SecaoEstado=CodigoSistema('BA'));
end;

Function DLLVerifyMG: Boolean;
begin
     Result := (SecaoEstado=CodigoSistema('MG'));
end;

Function DLLVerifySE: Boolean;
begin
     Result := (SecaoEstado=CodigoSistema('SE'));
end;

Function DLLVerifySP: Boolean;
begin
     Result := (SecaoEstado=CodigoSistema('SP'));
end;
