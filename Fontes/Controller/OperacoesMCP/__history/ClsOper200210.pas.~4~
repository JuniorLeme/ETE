unit ClsOper200210;

interface

uses
  ClsOperacoes, Xml.xmldom, Xml.XMLIntf, Xml.Win.msxmldom, Xml.XMLDoc,
  System.SysUtils,
  ClsServidorControl, ClsParametros, System.Classes, clsDVRFerramentas,
  ClsEnvioMCP,
  ClsRetornoMCP;

type
  T200210Envio = class(TEnvioMCP)
    Function MontaXMLEnvio(id_prova, Tipo: string): IXMLDocument;
  end;

  T200210Retorno = class(TRetornoMCP)
    Procedure MontaRetorno(XMLDoc: IXMLDocument);
  end;

implementation

uses ClsFuncoes;

Procedure T200210Retorno.MontaRetorno(XMLDoc: IXMLDocument);
var
  NoRetorno: IXMLNode;
  Nocfclive: IXMLNode;
begin

  try
    Self.Retorno(XMLDoc);
    XMLDoc.SaveToFile(UserProgranData + '\Criar\ParametrosETE200210.xml');
    ArquivoLog.GravaArquivoLog('Operação 200200 - Código: ' + Self.codigo);
  except
    on Erro: Exception do
    begin
      ArquivoLog.GravaArquivoLog('Operação 200200 - Retorno Padrão - ' +
        Erro.Message);
      XMLDoc.Active := False;
    end;
  end;

end;

Function T200210Envio.MontaXMLEnvio(id_prova, Tipo: string): IXMLDocument;
var
  EnvioMCP: TEnvioMCP;
  XMLElementoEnvio: IXMLNode;
  XMLExame: IXMLNode;
  XMLDispositivo: IXMLNode;
  XMLDispositivoSituacao: IXMLNode;
begin

  Result := TXMLDocument.Create(nil);
  Result.Active := False;
  Result.Active := True;

  EnvioMCP := TEnvioMCP.GetInstance;
  XMLElementoEnvio := EnvioMCP.GetEnvioMCP('200210', Result);

  XMLExame := XMLElementoEnvio.AddChild('exame');
  XMLExame.Attributes['id'] := id_prova;
  XMLExame.Attributes['tipo'] := Tipo;

  if DVRFerramentas <> nil then
  begin
    if Trim(DVRFerramentas.Status) <> '' then
    begin
      XMLDispositivo := XMLExame.AddChild('dispositivo');
      XMLDispositivo.Text := '';
      XMLDispositivo.Attributes['id'] := DVRFerramentas.Id.ToString;

      XMLDispositivoSituacao := XMLDispositivo.AddChild('situacao');
      XMLDispositivoSituacao.Text := DVRFerramentas.Status;
    end;
  end;

end;

end.
