unit ClsOperacoesRest;

interface

uses
  System.Classes, System.SysUtils, Vcl.StdCtrls, Vcl.Graphics, Vcl.Controls, Vcl.ComCtrls,
  Vcl.ExtCtrls, Vcl.Forms, Vcl.Dialogs, REST.Client, System.JSON;

type
  TOperacaoRestful = class(TComponent)
  private
    FRetorno: string;
  protected
  public
    property Retorno: string read FRetorno write FRetorno;
    function ExecutarConsultar(strURL: string; strEnvio: string; Aviso: String = ''): TJsonObject;
  end;

implementation

uses ClsFuncoes, FrmAvisoConexao, ClsConexaoFerramentas, REST.Types, ClsRetorno.SEITran;

function TOperacaoRestful.ExecutarConsultar(strURL: string; strEnvio: string; Aviso: String = ''): TJsonObject;
var
  objJson: TRetronoSEITranInicio;

  restClient: TRESTClient;
  restRequest: TRESTRequest;
  restResponse: TRESTResponse;

  objNet: TConexao;
begin
  Result := TJsonObject.Create;

  objNet  := TConexao.Create;
  objJson := TRetronoSEITranInicio.Create;
  restClient   := TRESTClient.Create('');
  restRequest  := TRESTRequest.Create(nil);
  restResponse := TRESTResponse.Create(nil);

  try
    try

      if (Not strEnvio.IsEmpty) then
      begin
        if objNet.PingDNSGrupoCRIAR then
        begin
          restRequest.Client := restClient;
          restRequest.Response := restResponse;
          restClient.BaseURL := strURL;
          restRequest.Method := TRESTRequestMethod.rmPOST;
          restRequest.Body.Create;
          restRequest.Body.Add(StrEnvio, ctAPPLICATION_JSON);

          restRequest.Execute;
          FRetorno := restResponse.Content;

          objJson.AsJson := FRetorno;

          Result.ParseJSONValue(FRetorno);

        end;
      end;

    except
      on E: Exception do
      begin

      end;
    end;
  finally
    FreeAndNil(objNet);
  end;
end;

end.
